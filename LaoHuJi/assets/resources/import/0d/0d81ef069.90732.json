[1,["527yntvZJOlKsvDryRvzpg@6c48a","eegNBMtldIe49eHs75iN6S"],["overlayTexture","_effectAsset"],[["cc.Material",["_name","_states","_defines","_props"],0,12],["cc.EffectAsset",["_name","shaders","techniques"],0]],[[0,0,1,2,3,4],[1,0,1,2,4]],[[[[0,"text-mesh-mat",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_GLOW":false}],[[[{},"glowColor",8,[4,4278190335],"overlayTexture",6,0]],11]]],0,0,[0,0],[0,1],[0,1]],[[[1,"../effect/text-mesh-sdf",[{"hash":3938619620,"name":"../effect/text-mesh-sdf|text-mesh-sdf-vs:vert|text-mesh-sdf-fs:frag","blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Glow","stageFlags":16,"binding":1,"members":[{"name":"glowColor","type":16,"count":1},{"name":"glowInner","type":13,"count":1},{"name":"glowOuter","type":13,"count":1},{"name":"glowPower","type":13,"count":1}],"defines":["USE_GLOW"]}],"samplerTextures":[{"name":"overlayTexture","type":28,"count":1,"stageFlags":16,"sampleType":0,"binding":2,"defines":["USE_OVERLAY_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":21,"location":1,"defines":[]},{"name":"a_texCoord1","format":21,"location":2,"defines":[]},{"name":"a_color","format":44,"location":3,"defines":[]},{"name":"a_texCoord2","format":21,"location":4,"defines":[]},{"name":"a_texCoord3","format":21,"location":5,"defines":[]},{"name":"a_strokeColor0","format":21,"location":6,"defines":[]},{"name":"a_strokeColor1","format":21,"location":7,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"sampleType":0,"tags":{"builtin":"local"},"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Glow","stageFlags":16,"binding":1,"members":[{"name":"glowColor","type":16,"count":1},{"name":"glowInner","type":13,"count":1},{"name":"glowOuter","type":13,"count":1},{"name":"glowPower","type":13,"count":1}],"defines":["USE_GLOW"]}],"samplerTextures":[{"name":"overlayTexture","type":28,"count":1,"stageFlags":16,"sampleType":0,"binding":2,"defines":["USE_OVERLAY_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":1,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":1,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"precision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_LOCAL\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n    highp vec4 cc_reflectionProbeBlendData1;\n    highp vec4 cc_reflectionProbeBlendData2;\n  };\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n      #define LIGHT_MAP_TYPE_DISABLED 0\n  #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n  #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n  #define REFLECTION_PROBE_TYPE_NONE 0\n  #define REFLECTION_PROBE_TYPE_CUBE 1\n  #define REFLECTION_PROBE_TYPE_PLANAR 2\n  #define REFLECTION_PROBE_TYPE_BLEND 3\n  #define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n      #define LIGHT_TYPE_DIRECTIONAL 0.0\n  #define LIGHT_TYPE_SPHERE 1.0\n  #define LIGHT_TYPE_SPOT 2.0\n  #define LIGHT_TYPE_POINT 3.0\n  #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n  #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n  #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n  #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n  #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n  #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n  #define TONE_MAPPING_ACES 0\n  #define TONE_MAPPING_LINEAR 1\n  #define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n  #ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n    #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n  #endif\n  #ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n  #endif\n#endif\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec2 a_texCoord1;\nin vec4 a_color;\nin vec2 a_texCoord2;\nin vec2 a_texCoord3;\nin vec2 a_strokeColor0;\nin vec2 a_strokeColor1;\nout vec4 color;\nout vec4 uvs;\nout float channelId;\nout float fill;\nout float stroke;\nout float strokeBlur;\nout vec4 strokeColor;\nout float stokeBlur;\nout float strokeEnable;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uvs = vec4(a_texCoord, a_texCoord1);\n  color = a_color;\n  channelId = a_texCoord2.x;\n  fill = 1.0 - a_texCoord2.y;\n  strokeBlur = a_texCoord3.y;\n  stroke = fill - fill * a_texCoord3.x;\n  strokeColor = vec4(a_strokeColor0, a_strokeColor1);\n  strokeEnable = step(0.001, a_texCoord3.x);\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"#extension GL_OES_standard_derivatives: enable\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n  layout(std140) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define REFLECTION_PROBE_TYPE_BLEND 3\n#define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_SPHERE 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_POINT 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n#ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n  #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#endif\n#ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#endif\nin vec4 color;\nin float channelId;\nin float fill;\nin float stroke;\nin float strokeBlur;\nin vec4 strokeColor;\nin float strokeEnable;\nin float glowInnerValue;\nin float glowOuterValue;\nin vec4 uvs;\nuniform sampler2D cc_spriteTexture;\n#if USE_OVERLAY_TEXTURE\n  uniform sampler2D overlayTexture;\n#endif\n#if USE_GLOW\n  layout(std140) uniform Glow {\n    vec4 glowColor;\n    float glowInner;\n    float glowOuter;\n    float glowPower;\n  };\n#endif\nvec4 getChannelMask() {\n  if(channelId <= 0.1) {\n    return vec4(1, 0, 0, 0);\n  }else if(channelId <= 1.1) {\n    return vec4(0, 1, 0, 0);\n  }else if(channelId <= 2.1) {\n    return vec4(0, 0, 1, 0);\n  }else{\n    return vec4(0, 0, 0, 1);\n  }\n}\nvec4 outerGlow(float dist, vec4 glowColor, float radius, float glowPower) {\n  float d = fill - dist;\n  float a_f = clamp(1.0 - d / radius, 0.0, 1.0) * step(0.0, d);\n  float b_f = min(dist, pow(a_f, glowPower));\n  return glowColor * b_f;\n}\nvec4 innerGlow(float dist,vec4 glowColor, float radius, float glowPower) {\n  float d = dist - fill;\n  float a_f = clamp(1.0 - d / radius, 0.0, 1.0) * step(0.0, d);\n  float b_f = min(dist, pow(a_f, glowPower));\n  return glowColor * b_f;\n}\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec4 channelMask = getChannelMask();\n  float dist = dot(channelMask, CCSampleWithAlphaSeparated(cc_spriteTexture, uvs.xy));\n      float smoothing = fwidth(dist);\n#if USE_GLOW\n  float fillSmoothing = 0.0;\n#else\n  float fillSmoothing = smoothing*1.2;\n#endif\n  vec2 clipMinXY = step(vec2(0.01, 0.01), uvs.zw);\n  vec2 clipMaxXY = step(uvs.zw, vec2(0.99, 0.99));\n  float clipValue = min(clipMinXY.x, clipMinXY.y) * min(clipMaxXY.x, clipMaxXY.y);\n  float fillDist = smoothstep(fill - fillSmoothing, fill + fillSmoothing, dist);\n  o = vec4(color.rgb, fillDist * color.a);\n  float alphaStroke = smoothstep(stroke - smoothing - strokeBlur, stroke + smoothing + strokeBlur, dist);\n  vec4 outline = mix(strokeColor * color.a, color, fillDist);\n  outline.a *= alphaStroke;\n  o = mix(o, outline, strokeEnable);\n  #if USE_OVERLAY_TEXTURE\n    o *= CCSampleWithAlphaSeparated(overlayTexture, uvs.zw);\n  #endif\n  #if USE_GLOW\n    vec4 outColor = outerGlow(dist, glowColor, glowOuter, glowPower + 0.0001);\n    vec4 inColor = innerGlow(dist, glowColor, glowInner, glowPower + 0.0001);\n    vec4 gColor = (outColor + inColor);\n    o.rgb = o.rgb * step(0.00001, o.a) + outColor.rgb*step(0.0, outColor.a);\n    o.a = max(o.a, gColor.a);\n    o.rgb = inColor.rgb * inColor.a + o.rgb * (1.0 - inColor.a);\n  #endif\n  #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n  #endif\n  ALPHA_TEST(o);\n  o.a *= clipValue;\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"precision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp mat4 cc_matViewProj;\n#if USE_LOCAL\n  uniform highp mat4 cc_matWorld;\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n      #define LIGHT_MAP_TYPE_DISABLED 0\n  #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n  #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n  #define REFLECTION_PROBE_TYPE_NONE 0\n  #define REFLECTION_PROBE_TYPE_CUBE 1\n  #define REFLECTION_PROBE_TYPE_PLANAR 2\n  #define REFLECTION_PROBE_TYPE_BLEND 3\n  #define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n      #define LIGHT_TYPE_DIRECTIONAL 0.0\n  #define LIGHT_TYPE_SPHERE 1.0\n  #define LIGHT_TYPE_SPOT 2.0\n  #define LIGHT_TYPE_POINT 3.0\n  #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n  #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n  #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n  #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n  #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n  #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n  #define TONE_MAPPING_ACES 0\n  #define TONE_MAPPING_LINEAR 1\n  #define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n  #ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n    #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n  #endif\n  #ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n  #endif\n#endif\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec2 a_texCoord1;\nattribute vec4 a_color;\nattribute vec2 a_texCoord2;\nattribute vec2 a_texCoord3;\nattribute vec2 a_strokeColor0;\nattribute vec2 a_strokeColor1;\nvarying vec4 color;\nvarying vec4 uvs;\nvarying float channelId;\nvarying float fill;\nvarying float stroke;\nvarying float strokeBlur;\nvarying vec4 strokeColor;\nvarying float stokeBlur;\nvarying float strokeEnable;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uvs = vec4(a_texCoord, a_texCoord1);\n  color = a_color;\n  channelId = a_texCoord2.x;\n  fill = 1.0 - a_texCoord2.y;\n  strokeBlur = a_texCoord3.y;\n  stroke = fill - fill * a_texCoord3.x;\n  strokeColor = vec4(a_strokeColor0, a_strokeColor1);\n  strokeEnable = step(0.001, a_texCoord3.x);\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"#extension GL_OES_standard_derivatives: enable\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture2D(tex, uv).rgb, texture2D(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture2D(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n      uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define REFLECTION_PROBE_TYPE_BLEND 3\n#define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_SPHERE 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_POINT 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n#ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n  #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#endif\n#ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#endif\nvarying vec4 color;\nvarying float channelId;\nvarying float fill;\nvarying float stroke;\nvarying float strokeBlur;\nvarying vec4 strokeColor;\nvarying float strokeEnable;\nvarying float glowInnerValue;\nvarying float glowOuterValue;\nvarying vec4 uvs;\nuniform sampler2D cc_spriteTexture;\n#if USE_OVERLAY_TEXTURE\n  uniform sampler2D overlayTexture;\n#endif\n#if USE_GLOW\n      uniform vec4 glowColor;\n    uniform float glowInner;\n    uniform float glowOuter;\n    uniform float glowPower;\n#endif\nvec4 getChannelMask() {\n  if(channelId <= 0.1) {\n    return vec4(1, 0, 0, 0);\n  }else if(channelId <= 1.1) {\n    return vec4(0, 1, 0, 0);\n  }else if(channelId <= 2.1) {\n    return vec4(0, 0, 1, 0);\n  }else{\n    return vec4(0, 0, 0, 1);\n  }\n}\nvec4 outerGlow(float dist, vec4 glowColor, float radius, float glowPower) {\n  float d = fill - dist;\n  float a_f = clamp(1.0 - d / radius, 0.0, 1.0) * step(0.0, d);\n  float b_f = min(dist, pow(a_f, glowPower));\n  return glowColor * b_f;\n}\nvec4 innerGlow(float dist,vec4 glowColor, float radius, float glowPower) {\n  float d = dist - fill;\n  float a_f = clamp(1.0 - d / radius, 0.0, 1.0) * step(0.0, d);\n  float b_f = min(dist, pow(a_f, glowPower));\n  return glowColor * b_f;\n}\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec4 channelMask = getChannelMask();\n  float dist = dot(channelMask, CCSampleWithAlphaSeparated(cc_spriteTexture, uvs.xy));\n      #ifdef GL_OES_standard_derivatives\n          float smoothing = fwidth(dist);\n      #else\n          float smoothing = 0.005;\n      #endif\n#if USE_GLOW\n  float fillSmoothing = 0.0;\n#else\n  float fillSmoothing = smoothing*1.2;\n#endif\n  vec2 clipMinXY = step(vec2(0.01, 0.01), uvs.zw);\n  vec2 clipMaxXY = step(uvs.zw, vec2(0.99, 0.99));\n  float clipValue = min(clipMinXY.x, clipMinXY.y) * min(clipMaxXY.x, clipMaxXY.y);\n  float fillDist = smoothstep(fill - fillSmoothing, fill + fillSmoothing, dist);\n  o = vec4(color.rgb, fillDist * color.a);\n  float alphaStroke = smoothstep(stroke - smoothing - strokeBlur, stroke + smoothing + strokeBlur, dist);\n  vec4 outline = mix(strokeColor * color.a, color, fillDist);\n  outline.a *= alphaStroke;\n  o = mix(o, outline, strokeEnable);\n  #if USE_OVERLAY_TEXTURE\n    o *= CCSampleWithAlphaSeparated(overlayTexture, uvs.zw);\n  #endif\n  #if USE_GLOW\n    vec4 outColor = outerGlow(dist, glowColor, glowOuter, glowPower + 0.0001);\n    vec4 inColor = innerGlow(dist, glowColor, glowInner, glowPower + 0.0001);\n    vec4 gColor = (outColor + inColor);\n    o.rgb = o.rgb * step(0.00001, o.a) + outColor.rgb*step(0.0, outColor.a);\n    o.a = max(o.a, gColor.a);\n    o.rgb = inColor.rgb * inColor.a + o.rgb * (1.0 - inColor.a);\n  #endif\n  #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n  #endif\n  ALPHA_TEST(o);\n  o.a *= clipValue;\n  return o;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","defines":[]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":56,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":5}},"defines":[{"name":"USE_LOCAL","type":"boolean"},{"name":"SAMPLE_FROM_RT","type":"boolean"},{"name":"USE_PIXEL_ALIGNMENT","type":"boolean"},{"name":"CC_USE_EMBEDDED_ALPHA","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"USE_OVERLAY_TEXTURE","type":"boolean"},{"name":"USE_GLOW","type":"boolean"},{"name":"IS_GRAY","type":"boolean"}]}],[{"passes":[{"program":"../effect/text-mesh-sdf|text-mesh-sdf-vs:vert|text-mesh-sdf-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":2,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"overlayTexture":{"value":"white","type":28},"alphaThreshold":{"type":13,"value":[0.5]},"glowColor":{"type":16,"value":[0,1,0,1]},"glowInner":{"type":13,"value":[0.5],"range":[0,1,0.01]},"glowOuter":{"type":13,"value":[0.5],"range":[0,1,0.01]},"glowPower":{"type":13,"value":[1.5],"range":[0,1,0.01]}}}]}]]],0,0,[],[],[]]]]
